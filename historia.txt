Este es el contenido inicial de este archivo

Primera linea de contenido

00. Configurar nuestra cuenta de git (de forma global para el usuario)
git config -l       (ver la configuración actual)
git config --global user.name "Nombre del usuario"
git config --global user.email "email"

*** Otra alternativa es usar credenciales distintas para cada repositorio de GIT

git config user.name "Nombre del usuario para este repositorio"
git config user.email "email para este repositorio"



0. Inicializar un repositorio de git
git init

1. Agregar un archivo al staging área (seguimiento/modificado)
git add nombreArchivo
git add .  (todos los archivos con cambios/sin seguimiento)

2. Sacar un archivo de staging area (sin seguimiento)
git rm --cached nombreArchivo

3. Enviar un archivo al repositorio (Historial de cambios)
git commit -m "mensaje del commit"

4. Mostrar todo el log de commits de nuestro proyecto
git log

5. Analizar los cambios en los archivos del proyecto
git show

6. Analizar los cambios entre dos commits
git diff commitHistoria commitBase (base por lo general es el HEAD)

7. Analizar los cambios que hay en el directorio de trabajo VS staging
git diff        (Tenemos agregado un archivo en el staging, pero este se le han añadido nuevos cambios, es decir, se agregó, luego se modifico)
                Esto obliga a que los cambios más recientes se tienen que enviar al staging

8. Volver en el tiempo
git checkout hashCommit nombreArchivo   (volver a un estado anterior este archivo)
git checkout master nombreArchivo       (volver a la version mas reciente este archivo)
NOTA:
Si se desea conservar los cambios anteriores de un archivo, se realiza un commit.
Cuando un archivo se vuelve en el tiempo, realmente se esta modificando.

9. Deshacer commits (solo en repositorio local, se infiere que jamás se ha hecho un pull de estos en remoto)
git reset --hard hashCommit     (elimina los commits mas recientes del historial con todo y su contenido, es decir, elimina los cambios de nuestro directorio de trabajo --- es el mas destructivo)
git reset --soft hashCommit     (elimina los commits mas recientes del historial conservando sus cambios en el stagging -- sirve para hacer un commit mas general de esos cambios)
git reset hashCommit            (elimina el historial de commits del historial, conserva los cambios en el directorio -- sirve para añadir mas cosas y hacer un commit mas general de esos cambios)
git commit --amend -m "nuevo mensaje"       (modifica el mensaje del último commit)
git commit --amend --no-edit                (permite corregir el commit mas reciente con nuevos cambios preparados en el staging - se nos olvido agregar cosas, o se nos fue un dato o archivo que forma parte del commit mas reciente)
git commit -am "mensaje del commit"    Solo funciona con archivos existentes (para agregar nuevos el procedimiento es el tradicional)


10. Ramas (lineas de tiempo alternativas al proyecto)
git branch nombreRama           (Crear rama "se genera una copia exacta del commit más reciente para esa rama")
git checkout nombreRama         (Moverme hacia otra rama)
git branch                      (listar todas las ramas registradas en el repositorio)
git branch -d nombnreRama       (Eliminar una rama del repositorio local - No afecta al remoto)
git push origin nombreRama      (Enviar una rama al repositorio remoto)
git pull origin nombreRama      (Traerme una rama del repositorio remoto)      

(Eliminar rama del repositorio remoto)
git push origin :nombreRama     
git push origin --delete nombreRama




11. Fusionar ramas "MERGE"
    NOTA:   SE DEBE POSICIONAR EN LA RAMA DONDE SE DESEA DEJAR CAER LOS CAMBIOS (Por lo generar es en master, main, developer)
            Al fusionar la rama, la rama anterior no se borra, sigue exisitendo. Pero el HEAD puede seguir avanzando en la historia del proyecto, a tal grado que esa rama se quede solitaria sin las nuevas actualizaciones de la rama master. EN ESTE SENTIDO, SI DESEAMOS SEGUIR TRABAJANDO EN ESA RAMA, ES IMPORTANTE VALORAR EL IMPACTO DE LOS NUEVOS CAMBIOS EN LA RAMA MAESTRA (NO SE RECOMIENDA HACER MERGE DE LA RAMA MAESTRA EN ESTA RAMA), EN CASO CONTRARIO, MEJOR CREAR UNA NUEVA RAMA CON LA ULTIMA VERSION DE LA RAMA MAESTRA Y TRABAJAR SOBRE ELLA.
    Una fusión en si es un nuevo commit en la historia del proyecto, por eso si existen conflictos al fusionar (Que dos progrmaadores hayan modificado las mismas lineas de código), es importante atenderlos y hacer el commit de forma tradicional (aceptando los cambios existentes / aceptando los cambios entrantes).
    
git merge nombreRamaAFisionar
git show-branch --all       (Obtener mas información sobre los ultimos cambios en las ramas del proyecto)
git push origin otraRama    (Empujar al repositorio remoto una rama especifica de mi proyecto)
                            Esto significa que podemos tener ramas locales que no tienen por que ser publicas en remoto.
                            



12. Comunicar con Github
* Crear repositorio en Github
* Copiar el link https
git remote add origin url_https_link_repositorio    (añadir un repositorio remoto - llamado origin)
git push origin master      (empujar la rama master hacia el repositorio remoto - llamado origin)
git pull origen master      (traer el origen (repositorio remoto) hacia mi rama master (local))
git remote -v               (Listar los repositorios remotos conectados con mi repositorio local)

* Cuando el repositorio remoto ya tiene cambios (README, LICENCE) y queremos traer esa info por primera vez
git pull origen master --allow-unrelated-histories

Podemos tener registrados multiples repositorios remotos en un repositiorio local. Y el nombre es indiferente, pero generalmente se le denomina origin


12.5 ABC del Pull y Push

IMPORTANTE: Se recomienda que antes de hacer un PULL (traernos los nuevos cambios publicados en el repositorio remoto), nos posicionemos en la rama correcta dentro de nuestro repositiorio local, ya que un PULL EN SI ES UN MERGE. Por tanto, si deseamos hacer pull de master, debemos posicionarnos en master. Si deseamos hacer pull de la rama de desarrollo, nos posicionamos sobre la rama de desarrollo dentro del repositorio local.
Finalmente, si deseamos dejar caer los cambios de la rama desarrollo sobre la rama master, nos posicionamos en master, hacemos merge de desarrollo, Y FINALMENTE HACEMOS PUSH DE MASTER HACIA EL REPOSITORIO REMOTO (origion)

No debemos de hacer PUSH de una rama que no nos corresponde, solo se debe hacer PULL para traernos esos cambios de la otra persona que esta trabajando sobre la misma.

Antes de hacer un PUSH o un nuevo COMMIT en el repositioro local. Es importante hacer un PULL.
Es decir, primero nos traemos los nuevos cambios publicados en el repositorio remoto, y luego hacemos los commits correspondientes con nuestro trabajo, y antes de publicar, nuevamente hacemos un PULL y finalmente el PUSH.




13. Generar claves SSH      (Una llave privada/publica - por cada computadora)
ssh-keygen -t rsa -b 4096 -C "your_email@example.com"     (Generar claves SSH - Publica y Privada)
        Asignar un nombre al archivo cuando lo solicite, no es necesario añadir una contraseña o frase)
eval "$(ssh-agent -s)"        (Iniciar el agente para gestionar las claves en la computadora)

AGREGAR LA LLAVE PRIVADA AL SSH-AGENT DEL SISTEMA OPERATIVO

WINDOWS / LINUX
ssh-add ~/.ssh/nombreArchivoClavePrivada        (Por defecto, es id_rsa si no se asigno un nombre)

MAC OS
open ~/.ssh/config          (Abrir el archivo de configuración o crearlo si no existe - touch ~/.ssh/config)
Añadir lo siguiente al mismo
Host *
  AddKeysToAgent yes
  UseKeychain yes
  IdentityFile ~/.ssh/nombreArchivoClavePrivada     (id_rsa)

ssh-add -K ~/.ssh/nombreArchivoClavePrivada

14. Vincular Llave pública con Github
* Ir a settings / SSH and GPG KEY
* Añadir la nueva llave pública asociada con uno de nuestos PC      (abrir el id_rsa.pub con VSCode y copiar y gegar su contenido en el formulario de github)


14. Cambiar URL del repositorio remoto registrado
git remote set-url origin git@github.com:alexglzrys/hyperblog.git       (origin es el nombre que le dimos a nuestro repositorio remoto)

14.5 Eliminar un reposotorio remoto añadido.
git remote remove nombreRepoRemoto

** SI TENEMOS VINCULADAS LAS CREDENCIALES SSH PUBLICAS CON GITHUB, LA PRIMERA VEZ NOS CUESTIONA SI ESTAMOS DE ACUERDO, EL RESTO, JAMÁS NOS PIDE EL PASSWORD"

15. Ver la historia completa de nuestro proyecto
git log --all --oneline --decorate --graph

* Podemos crear una alias de todos esos comandos largos
alias nombreComando="todo-el-comando-largo-y-feo"

nombreComando       (Invoca el comando asociado con este alias)


16. Tags        (Versiones de nuestro código)
(Crear un tag llamado v0.1 referenciado al commit más actual - Los tags tambien llevan un mensaje, pero no contenido modificado, es por ello que cuando hacemos status, no aparece nada. Son solo referencias hacia un commit en especifico. Por tanto, los tags son utiles en Github, por que hacen referencia a un punto especifico del proyecto. "version")
git tag -a v1.4 -m "my version 1.4"         
git tag         (Listar todos los tags en mi proyecto)
(Crear un tag asociado a un commit anterior en mi proyecto - se añade el hash al final del mismo)
git tag -a v0.1 -m "Primera versión del proyecto del curso de Git" aaf7452      
git show nombreTag      (Ver información completa de ese tag)
git show-ref --tags     (Ver un listado completo de todos los tags y su relación con los commits del proeycto)
git push origin --tags  (Empujar los tags hacia el repositorio remoto)
git pull origin --tags  (Traerme todos los tags definidos en el repositorio remoto)

(Eliminar un tag del repositorio - "Recordemos que tambien nos sirven como referencias - quizá lo creamos para indicar que teníamos que hacer algo en ese punto del proyecto")
git tag -d nombreTag

NOTA: SI ENVIAMOS LOS CAMBIOS A GITHUB EL TAG ELIMINADO EN NUESTRO REPOSITORIO LOCAL SEGUIRA ESTANDO PRESENTE EN GITHUB. ESTO SE DEBE A QUE GITHUB CONSIDERA LOS TAGS COMO RELEASES DEL PROYECTO, POR TANTO TENEMOS QUE FORZAR A SU ELIMINACION EN remoto

git push origin --delete nombreTagAEliminarEnRemoto


17. Añadir colaboradores al proyecto
Ir a la configuración del repositorio remoto (Github settings)
Manejar accesos
Agregar un nuevo invitado (Puede ser por email / username)
** El invitado tiene que aceptar la invitación enviada por correo electrónico
Ahora ya puede hacer push (pero primero tiene que clonar el proyecto)
** DE NO HACER ESTO, AL HACER PUSH GITHUB ENVIARÁ UN ERROR 403



18. Pull Request.

Solo se encuentran disponibles en Github, Gitlab o Bitnucket. No son propios de GIT, y son como procesos intermedios que permiten a los integrantes de un equipo de desarrollo tomar decisiones sobre ciertos cambios en el proyecto, antes de fusionarlos con la rama maestra.
Es un similar a procesos de revisión: Es decir, yo internamente veo que existen errores sobre mi rama de trabajo, creo otra rama alternativa para corregir esos bugs, pero antes de fusionarla con mi rama (desarrollo frontend) y subirla al repositorio remoto, SOLO HAGO PUSH de la rama FIX, en GITHUB me avisa que una rama se ha subido reciente y sobre ese mensaje creo un PULL-REQUES (opinion o revisión de esa rama) y lo asigno a algun colaborador del proyecto (dejandole un mensaje que me apoye revisando esos cambios), el me da sus opiones (si existen erroes aun - No lo aprueba), o acepta la fusión (merge).
Estos avisos o mensajes son a través de la plataforma de GITHUB y CORREO ELECTRÓNICO.

Un PUll Request, puede estar formado de muchos commits y muchos archivos cambiados

** En la vida diaria, se hace de esa forma. Hay alguien que se le pide revisar esos cambios (MEDIANTE UN PULL REQUEST), de ser correcto, acepta y por consiguiente se hace el MERGE. con la rama objetivo. (Un nuevo commit en la historia del proyecto.) Git ofrece la posibilidad de borrar esa rama de FIX (para no llenarnos de muchas ramas de corrección), pero eso no significa que en local perdamos esa rama, nosotros decidimos si la conservamos o tambíen la eliminamos.

IMPORTANTE: Hacer un PULL de la rama objetivo, ya que de ser aprobado el cambio, esta ya tiene los nuevos camboios fusionados.


--- PULL REQUEST EN PROYECTOS OPEN SOURCE ( Solicitar que mis cambios sean considerados en el proyecto )

En este punto, no somos colaboradores, pero nos gustaría contribuir con algunas mejoras en el proyecto.
- Hacer un watch (seguir el proyecto)
- Dar una estrellita (un me gusta al proyecto)
- Hacer un FORK (Una copia exacta de todo el proyecto vinculada a mi cuenta de GITHUB)
                Ojo esta puede rápidamente estar unos cuantos commits atras (desactualizada) si el dueño del proyecto es muy activo y sube mejoras.

                O puede tener unos commits más adelante, porque hemos contribuido demasiado que el original ya se quedo obsoleto.

- Se recomienda añadir un repositorio remoto identificado como upstream (fuente de origen) en el repositorio local, mismo que apunte a la URL/ssh del proyecto original. Ya que el origin corresponde al FORK de este mismo proyecto.

git remote add upstream https://github.com/alexglzrys/hyperblog.git     (siempre colocar el http)
git remote -v

- Hacer un PULL hacia master dede el repositorio remoto UPSTREAM. (De esta forma nos aseguramos que ambos repositorios "local/fork/original" esten debidamente emparejados.)

git pull upstream master

- Ahora para hacer las contribuciones, trabajar en local, hacer los commits, enviar esos cambios al FORk, y desde el FORK Solictar un PULL REQUEST (github es inteligente y sabe a quien solicitarlo, al dueño original del proyecto).

git push origin master
git add
git commit
git push origin master

- Si todo es correcto, el dueño lo aprueba, lo fusiona y entonces sigue la historia normal de ese proyecto, NOSOTROS DEBEMOS HACER PULL A DIARIO desde el UPSTREAM para que nuestro repositorio local este al día, y HACER UN PULL AL FORK (copia en github) para que tanto el local como el fork estem emparejados con el repo original.

- El dueño debería hacer pull de los nuevos cambios en el repositorio remoto.

Es importante mencionar que los PULL REQUEST son una caracteristica de GITHUB


19. .gitignore

Es un archivo que se coloca a nivel de raíz del proyecto, dónde se especifica que directorios o archivos del proyecto deben ser ignorados por GIT.
*.jpg
*.png
node_modules/
images/
documentos/
!documentos/publicos
El ! indica una excepción (se ignora todo el directorio documentos, pero se permite la subcarpeta publicos)

NOTA: EN GIT NO SE RECOMIENDA AGREGAR ARCHIVOS BINARIOS (IMAGENES), SOLO ARCHIVOS DE TEXTO.
Para el tema de imagenes podemos publicarlas directamente sobre un FTP, CDN, o servicios como imgurl.com, donde se publican imagenes y solo se hace referencia a ellas por su URL.


20. README.md

Es un archivo para la descripción detallada del proyecto y sus formas de instalación, aspi como el listado de dependencias y colaboradores.



21. Renombrar archivos.

Es común en el transcurso del proyecto, decidor renombrar el nombre de algunos archivos. Esto se hace a través del la linea de comandos de GIT cuando el archivo ya se encuentra agregado al repositorio

git mv old_filename new_filename



22. Generar la página web de nuestro proyecto (GITHUB PAGES)

Ir a la configuración del proyecto en Github
Ir a Pages
Seleccionar la fuente (rama) desde se alimentará el sitio web
Seleccionar /root
Save



23. Rebase

En ocasiones necesitamos aplanar el historial de nuestra rama con commits que surgieron en una rama alternativa, pero no queremos conservar esa rama alternativa ni mucho menos fusionarla, ya que al hacer MERGE, esos commits se pierden y se genera uno solo. 
Rebase se trae esos commits de una rama alternativa, a la rama base colocandolos por delante de los ultimos cambios realizados en dicha rama.
NO SE RECOMIENDA HACER REBASE EN RAMAS QUE YA SE HAYAN PUSHEADO AL REPO REMOTO YA QUE SOBRE-ESCRIBE LA HIOSTORIA DEL PROYECTO, RENOMBRANDO LOS HASHES.
Esto solo es local.
El ejemplo es trabajar en development y surgen nuevas caracteristicas (otra rama), se trabajan en esas caracteristicas, pero surgen solicitudes en la rama development, al final nos gustaria que la historia de la rama development tenga todos los commits de las demas ramas. (SOLO POR ESTETICA)
Mi recomendación es no usarlo, siempre es bueno saber de donde sugen los commits, en que momento, y desde que rama, cuando se fusionaron, etc.

git rebase              (desde la rama alternativa primero)
git rebase              (desde la rama base)


