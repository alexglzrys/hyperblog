Este es el contenido inicial de este archivo

Primera linea de contenido

0. Inicializar un repositorio de git
git init

1. Agregar un archivo al staging área (seguimiento/modificado)
git add nombreArchivo
git add .  (todos los archivos con cambios/sin seguimiento)

2. Sacar un archivo de staging area (sin seguimiento)
git rm --cached nombreArchivo

3. Enviar un archivo al repositorio (Historial de cambios)
git commit -m "mensaje del commit"

4. Mostrar todo el log de commits de nuestro proyecto
git log

5. Analizar los cambios en los archivos del proyecto
git show

6. Analizar los cambios entre dos commits
git diff commitHistoria commitBase (base por lo general es el HEAD)

7. Analizar los cambios que hay en el directorio de trabajo VS staging
git diff        (Tenemos agregado un archivo en el staging, pero este se le han añadido nuevos cambios, es decir, se agregó, luego se modifico)
                Esto obliga a que los cambios más recientes se tienen que enviar al staging

8. Volver en el tiempo
git checkout hashCommit nombreArchivo   (volver a un estado anterior este archivo)
git checkout master nombreArchivo       (volver a la version mas reciente este archivo)
NOTA:
Si se desea conservar los cambios anteriores de un archivo, se realiza un commit.
Cuando un archivo se vuelve en el tiempo, realmente se esta modificando.

9. Deshacer commits (solo en repositorio local, se infiere que jamás se ha hecho un pull de estos en remoto)
git reset --hard hashCommit     (elimina los commits mas recientes del historial con todo y su contenido, es decir, elimina los cambios de nuestro directorio de trabajo --- es el mas destructivo)
git reset --soft hashCommit     (elimina los commits mas recientes del historial conservando sus cambios en el stagging -- sirve para hacer un commit mas general de esos cambios)
git reset hashCommit            (elimina el historial de commits del historial, conserva los cambios en el directorio -- sirve para añadir mas cosas y hacer un commit mas general de esos cambios)
git commit --amend -m "nuevo mensaje"       (modifica el mensaje del último commit)
git commit --amend --no-edit                (permite corregir el commit mas reciente con nuevos cambios cambios preparados en el staging - se nos olvido agregar cosas, o se nos fue un dato o archivo que forma parte del commit mas reciente)
git add -am "mensaje del commit"    Solo funciona con archivos existentes (para agregar nuevos el procedimiento es el tradicional)

10. Ramas
git branch nombreRama        (Crear rama a partir dónde se encuentre el HEAD)
git checkout nombreRama      (Moverme hacia otra rama)